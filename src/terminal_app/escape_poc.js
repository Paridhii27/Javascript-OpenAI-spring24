import { ask, say } from "../shared/cli.js";
import { gptPrompt } from "../shared/openai.js";

main();

async function main() {
  //Start of the game
  say("Welcome to escape AI");
  //Defining the escape rooms
  const escRooms = [
    {
      id: 101001,
      name: "Data Dungeon",
      keyfeature: "Set underground with a lot of hidden tunnels",
    },
    {
      id: 282282,
      name: "Cyborg Whispers",
      keyfeature: "There are creepers and vines across the edges of the room.",
    },
  ];

  //Providing the escape rooms that are ready to be experienced
  say("Choose an escape room adventure to enter:");
  escRooms.forEach((room) => {
    say(`${room.id}. ${room.name}`);
  });

  //Choosing which escape experience to enter
  const selectedRoomId = await ask("Enter the number of your choice:");

  const selectedRoom = escRooms.find(
    (room) => room.id === parseInt(selectedRoomId)
  );

  //Checking if the player entered the escape room
  if (selectedRoom) {
    const roomDescription = await generateRoomDesc(selectedRoom.name);
    say(roomDescription);

    //Data dungeon
    if (parseInt(selectedRoomId) == 101001) {
      const inventory = await generateRoomInventory();
      say(inventory);
    }
    //Cyborg Whispers
    else if (parseInt(selectedRoomId) == 282282) {
      const whispers = await generateCyborgWhispers();
      say(whispers);
    }
    //More rooms to come
    else {
      say("This room is still under wraps. Come back in a week.");
    }
  }
  // Restart the experience and enter the correct room number
  else {
    say("Invalid choice. Please select a valid escape room.");
  }
}

//Generates what the escape room looks like and sets the tone
async function generateRoomDesc(roomName) {
  const prompt = `Generate a description for an escape room called ${roomName}. Include descriptions of what the space looks like and what is the players first clue to escaping the ${roomName}. It also must have the feature of ${roomName.keyfeature}`;
  const response = await gptPrompt(prompt, {
    max_tokens: 200,
    temperature: 0.7,
  });
  return response;
}

//Objects based puzzle created by the data dungeon experts
async function generateRoomInventory() {
  const obj = await ask("State three objects you find in this room");
  const objPrompt = `Create an easy encryption puzzle based on the ${obj} in the space. Give the user three guesses to solve the puzzle. Do not give scenario background as this is part of an escape room where the player must make inferences just based on the space.`;
  const objResponse = await gptPrompt(objPrompt, {
    max_tokens: 200,
    temperature: 0.7,
  });
  say(objResponse);
}

// Racing to win the word based human vs cyborg game
async function generateCyborgWhispers() {
  //Tracking word score
  let cyborgScore = 0;
  let userScore = 0;

  // Generate a random word to begin the game
  const randomWord = await ask("Give a random word:");

  // Function to start the timer
  function startTimer() {
    console.log("Timer started...");
    setTimeout(() => {
      console.log("Woohoo!");
    }, 20000); // 20 seconds
  }
  // Start the timer
  await startTimer();

  // Prompt the user to provide rhyming words
  const userRhymes = await ask(
    `Quickly! Give as many rhyming words to "${randomWord}" as possible within 20 seconds:`
  );

  // Generate rhyming words using GPT-3
  const wordsPrompt = `Generate as many rhyming words to "${randomWord}" as possible in 5 seconds. Keep a list of all the words generated. Print only the rhyming words.`;
  const wordsResponse = await gptPrompt(wordsPrompt, {
    max_tokens: 60,
    temperature: 0.7,
  });
  say(wordsResponse);

  // Count the number of words generated by the user and the cyborg
  const cyborgRhymes = wordsResponse.split("\n").filter(Boolean);

  // Calculate scores
  cyborgScore = cyborgRhymes.length;
  userScore = userRhymes.split(" ").filter(Boolean).length;

  // Display the results
  say(`Cyborg: ${cyborgScore} words`);
  say(`You: ${userScore} words`);

  console.log("Words Response:", wordsResponse);
  console.log("Cyborg Rhymes:", cyborgRhymes);

  //Determine if the player escapes
  if (cyborgScore > userScore) {
    say("The Cyborg beats you so you must try again");
  } else if (userScore > cyborgScore) {
    say("Wow you've successfully escaped the cyborg whispers");
  } else {
    say("It's a tie! Are you a cyborg?");
  }

  return wordsResponse;
}
